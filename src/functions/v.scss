/**
 * CSS CUSTOM PROPERTY FUNCTION
 *
 * A shorter access to `var(--myVar)`
 *
 * Use:
 * `color: v(primary);`
 * `color: v(primary, #000);`
 * `color: v(primary, seconday, ternary, #000);`
 * `padding-left: v(x-padding, 2rem);`
 * `transform: translate3d(v(x-delta), v(y-delta), 0);`
 *
 * Parameters:
 *  $propertyName: a CSS custom property name without its double hyphen prefix
 *  $argsFallbacks (optional): a list of custom properties names followed by a fallback value.
 */
@function v($propertyName: '', $argsFallbacks...) {
  $fallbacksNb: length($argsFallbacks);

  // No fallbacks.
  @if $fallbacksNb < 1 {
    @return var(--#{$propertyName});
  }

  // Last fallback: it can be a valid CSS value, or `null`.
  $fallbacks: nth($argsFallbacks, $fallbacksNb);

  @if $fallbacksNb > 1 {

    // Last parameter is a valid fallback.
    @if ($fallbacks != null) {
      $fallbacks: meduzen-wrap-v-fallbacks($argsFallbacks, $fallbacksNb - 1, $fallbacks)
    } @else {

      // Last parameter is null: it isnâ€™t a valid fallback, we skip it.
      $fallbacks: var(--#{nth($argsFallbacks, $fallbacksNb - 1)});

      @if $fallbacksNb > 2 {
        $fallbacks: meduzen-wrap-v-fallbacks($argsFallbacks, $fallbacksNb - 2, $fallbacks)
      }
    }
  }

  @return var(--#{$propertyName}, $fallbacks);
}

/**
 * Wrap custom properties fallbacks.
 */
@function meduzen-wrap-v-fallbacks($argsFallbacks, $upper-index, $fallbacks) {
  @for $index from $upper-index through 1 {
    $fallbacks: var(--#{nth($argsFallbacks, $index)}, #{$fallbacks});
  }

  @return $fallbacks;
}
